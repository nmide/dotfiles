{"_id":"scandir","_rev":"33-c9160519bd91ee52ee1e1eedd57a8f33","name":"scandir","description":"recursive directory scan with filtering features","dist-tags":{"latest":"0.1.2"},"versions":{"0.0.1":{"name":"scandir","version":"0.0.1","description":"simple recursive directory scan","main":"lib/scandir.js","bin":{"scandir":"bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","dependencies":{"commander":"1.x.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir[![Build Status](https://secure.travis-ci.org/sdolard/node-scandir.png?branch=master)](http://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\nUsage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -r, --recursive            Scan dir recursive\n    -w, --wildcard <wildcard>  Wildcard\n    -e, --expression <regexp>  Regular expression\n    -i, --insensitive          Case insensitive. Default to false\n    -d, --debug\n\n```\n\n## LIB\n\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.1","dist":{"shasum":"caba3d5c5927331be3a3eda98461de5b2201d983","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.1.tgz"},"_from":".","_npmVersion":"1.2.12","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.2":{"name":"scandir","version":"0.0.2","description":"simple recursive directory scan","main":"lib/scandir.js","bin":{"scandir":"bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","dependencies":{"commander":"1.x.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\nUsage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -r, --recursive            Scan dir recursive\n    -w, --wildcard <wildcard>  Wildcard\n    -e, --expression <regexp>  Regular expression\n    -i, --insensitive          Case insensitive. Default to false\n    -d, --debug\n\n```\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{object}] config\n    * @params [{booleab}] config.debug. Defautl false\n    * @event file({string} filePath, {Stats} stats)\n    * @event end > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.2","dist":{"shasum":"03835c4cd9b12b0c6389159e35a6ddea7c6311ce","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.12","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.3":{"name":"scandir","version":"0.0.3","description":"simple recursive directory scan","main":"lib/scandir.js","bin":{"scandir":"bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","dependencies":{"commander":"1.x.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             Scan dir recursive\n    -w, --wildcard <wildcard>                   Wildcard\n    -e, --expression <regexp>                   Regular expression\n    -i, --insensitive                           Case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  Return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    Return files lower than size (Bytes)\n    -s, --showbrokenlink                        Show broken symbolic link\n    -d, --debug\n\n```\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{object}] config\n    * @params [{booleab}] config.debug. Defautl false\n    * @event file({string} filePath, {Stats} stats)\n    * @event end > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.3","dist":{"shasum":"1e2099d7ab931fabd7f96bd73c18065bacf0392c","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.3.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.4":{"name":"scandir","version":"0.0.4","description":"simple recursive directory scan","main":"lib/scandir.js","bin":{"scandir":"bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha -R spec"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","dependencies":{"commander":"1.x.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n\n```\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.4","dist":{"shasum":"fd01af614b0d389d8f327f0ffadd718c3810b174","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.4.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.5":{"name":"scandir","version":"0.0.5","description":"simple recursive directory scan","main":"lib/scandir.js","bin":{"scandir":"bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","dependencies":{"commander":"1.x.x","mime":"1.2.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.5","dist":{"shasum":"a2236a6695895a3d95b8d147efe141fb4511728f","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.5.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.6":{"name":"scandir","version":"0.0.6","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, undef: false, unparam: false, vars: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"1.x.x","mime":"1.2.x"},"devDependencies":{"jsrevival":"0.1.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.6","dist":{"shasum":"5fbd5ddf12cc31b0c0ea317dfd14302af432f637","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.6.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.7":{"name":"scandir","version":"0.0.7","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"1.x.x","mime":"1.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-encode-to-webm\n    -H, --displaypluginoptions                  Ex: -p video/vlc-encode-to-webm -H\n    -o, --pluginoptions <options>               Ex: -o \"vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.7","dist":{"shasum":"5980b512590f82e7efa657db5ec12bfd752d527d","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.8":{"name":"scandir","version":"0.0.8","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"1.x.x","mime":"1.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80',vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.8","dist":{"shasum":"448cdbe08ea43e6dfa0bb7b274651f2dedd643fc","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.9":{"name":"scandir","version":"0.0.9","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"1.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug                                 \n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","_id":"scandir@0.0.9","dist":{"shasum":"a74b7d8ef6dd83af31874f879c1b86d36a7e6933","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.9.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.10":{"name":"scandir","version":"0.0.10","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"1.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --stoponerror                           stop scan on first error. Default to false\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","bugs":{"url":"https://github.com/sdolard/node-scandir/issues"},"_id":"scandir@0.0.10","dist":{"shasum":"b2c7c30b2553594ef50a674958bf92caffc9b489","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.10.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.0.11":{"name":"scandir","version":"0.0.11","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"2.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)[![Build Dependency](https://david-dm.org/sdolard/node-scandir.png)](https://david-dm.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --stoponerror                           stop scan on first error. Default to false\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value. Min value 0.\n    * @params [{Number}] config.lowerthan. Bytes value. Min value 1.\n    * @params [{string}]config.media.\n    * @params [{boolean}]config.stopOnError. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","bugs":{"url":"https://github.com/sdolard/node-scandir/issues"},"_id":"scandir@0.0.11","dist":{"shasum":"1abaec431fcc4c017a9be28a685a8ff124b87aee","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.0.11.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.1.0":{"name":"scandir","version":"0.1.0","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"2.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)[![Build Dependency](https://david-dm.org/sdolard/node-scandir.png)](https://david-dm.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --stoponerror                           stop scan on first error. Default to false\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value. Min value 0.\n    * @params [{Number}] config.lowerthan. Bytes value. Min value 1.\n    * @params [{string}]config.media.\n    * @params [{boolean}]config.stopOnError. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","bugs":{"url":"https://github.com/sdolard/node-scandir/issues"},"_id":"scandir@0.1.0","dist":{"shasum":"5971d867d515e2672e31a020bcc63590f771da58","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.1.1":{"name":"scandir","version":"0.1.1","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"2.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)[![Build Dependency](https://david-dm.org/sdolard/node-scandir.png)](https://david-dm.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --stoponerror                           stop scan on first error. Default to false\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value. Min value 0.\n    * @params [{Number}] config.lowerthan. Bytes value. Min value 1.\n    * @params [{string}]config.media.\n    * @params [{boolean}]config.stopOnError. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","bugs":{"url":"https://github.com/sdolard/node-scandir/issues"},"_id":"scandir@0.1.1","dist":{"shasum":"206c8e19314d598b09e9b176c6b8c191d0844d6a","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]},"0.1.2":{"name":"scandir","version":"0.1.2","description":"recursive directory scan with filtering features","main":"lib/scandir.js","bin":{"scandir":"./bin/scandir"},"directories":{"test":"test"},"scripts":{"pretest":"jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/","test":"mocha"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"keywords":["readdir","recursive"],"author":{"name":"sdolard@gmail.com"},"license":"BSD","readmeFilename":"README.md","gitHead":"93b6c7035fcffaf7cd3473aebb7eaba278bc68f5","engines":{"node":">=0.8.0"},"dependencies":{"commander":"2.x.x","mime":"1.2.x","ansi":"0.2.x"},"devDependencies":{"jsrevival":"0.2.x","mocha":"x.x.x"},"readme":"node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)[![Build Dependency](https://david-dm.org/sdolard/node-scandir.png)](https://david-dm.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --stoponerror                           stop scan on first error. Default to false\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -L, --displayplugins                        Display available plugins\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80', vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value. Min value 0.\n    * @params [{Number}] config.lowerthan. Bytes value. Min value 1.\n    * @params [{string}]config.media.\n    * @params [{boolean}]config.stopOnError. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","bugs":{"url":"https://github.com/sdolard/node-scandir/issues"},"_id":"scandir@0.1.2","dist":{"shasum":"aeda630ab9a3328c544c34e2efb0f862e5ff5526","tarball":"https://registry.npmjs.org/scandir/-/scandir-0.1.2.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"sdolard","email":"sdolard@gmail.com"},"maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}]}},"readme":"node-scandir[![Build Status](https://secure.travis-ci.org/sdolard/node-scandir.png?branch=master)](http://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\nUsage: scandir [options] [command]\n\n  Commands:\n\n    *                      Directory to scan\n\n  Options:\n\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -r, --recursive            Scan dir recursive\n    -w, --wildcard <wildcard>  Wildcard\n    -e, --expression <regexp>  Regular expression\n    -i, --insensitive          Case insensitive. Default to false\n    -d, --debug\n\n```\n\n## LIB\n\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n","maintainers":[{"name":"sdolard","email":"sdolard@gmail.com"}],"time":{"modified":"2013-09-28T08:45:08.811Z","created":"2013-03-04T22:10:49.712Z","0.0.1":"2013-03-04T22:10:52.512Z","0.0.2":"2013-03-05T12:36:07.059Z","0.0.3":"2013-03-05T20:29:10.284Z","0.0.4":"2013-03-05T21:45:23.305Z","0.0.5":"2013-03-25T14:35:45.207Z","0.0.6":"2013-03-25T15:13:05.785Z","0.0.7":"2013-05-26T20:33:21.817Z","0.0.8":"2013-05-27T22:00:54.346Z","0.0.9":"2013-06-11T12:04:45.071Z","0.0.10":"2013-06-16T13:43:02.086Z","0.0.11":"2013-08-10T21:35:34.530Z","0.1.0":"2013-08-28T08:39:27.636Z","0.1.1":"2013-09-10T08:03:10.115Z","0.1.2":"2013-09-28T08:45:08.811Z"},"author":{"name":"sdolard@gmail.com"},"repository":{"type":"git","url":"git://github.com/sdolard/node-scandir.git"},"_attachments":{},"_etag":"\"6LC8I2SWP9QYA2QMLP3HE1I9Q\""}