(function() {
  describe('Admonition block', function() {
    var grammar;
    grammar = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-asciidoc');
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName('source.asciidoc');
      });
    });
    it('parses the grammar', function() {
      expect(grammar).toBeDefined();
      return expect(grammar.scopeName).toBe('source.asciidoc');
    });
    describe('Should tokenizes when', function() {
      return it('contains section title and bulleted list', function() {
        var numLine, tokens;
        tokens = grammar.tokenizeLines('[IMPORTANT]\n.Feeding the Werewolves\n====\nWhile werewolves are hardy community members, keep in mind the following dietary concerns:\n\n* They are allergic to cinnamon.\n* More than two glasses of orange juice in 24 hours makes them howl in harmony with alarms and sirens.\n* Celery makes them sad.\n====\nfoobar');
        expect(tokens).toHaveLength(10);
        numLine = 0;
        expect(tokens[numLine]).toHaveLength(3);
        expect(tokens[numLine][0]).toEqualJson({
          value: '[',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: 'IMPORTANT',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc', 'markup.meta.attribute-list.asciidoc', 'entity.name.function.asciidoc']
        });
        expect(tokens[numLine][2]).toEqualJson({
          value: ']',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '.',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: 'Feeding the Werewolves',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc', 'markup.heading.blocktitle.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: '====',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: 'While werewolves are hardy community members, keep in mind the following dietary concerns:',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: '',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '*',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc', 'markup.list.asciidoc', 'markup.list.bullet.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: ' They are allergic to cinnamon.',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '*',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc', 'markup.list.asciidoc', 'markup.list.bullet.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: ' More than two glasses of orange juice in 24 hours makes them howl in harmony with alarms and sirens.',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '*',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc', 'markup.list.asciidoc', 'markup.list.bullet.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: ' Celery makes them sad.',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '====',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: '',
          scopes: ['source.asciidoc', 'markup.admonition.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: 'foobar',
          scopes: ['source.asciidoc']
        });
        numLine++;
        return expect(numLine).toBe(10);
      });
    });
    return describe('Should not tokenizes when', function() {
      return it('beginning with space', function() {
        var numLine, tokens;
        tokens = grammar.tokenizeLines(' [IMPORTANT]\n.Feeding the Werewolves\n====\nWhile werewolves are hardy community members, keep in mind the following dietary concerns:\n...\n====\nfoobar');
        expect(tokens).toHaveLength(7);
        numLine = 0;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: ' [IMPORTANT]',
          scopes: ['source.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(2);
        expect(tokens[numLine][0]).toEqualJson({
          value: '.',
          scopes: ['source.asciidoc']
        });
        expect(tokens[numLine][1]).toEqualJson({
          value: 'Feeding the Werewolves',
          scopes: ['source.asciidoc', 'markup.heading.blocktitle.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: '====',
          scopes: ['source.asciidoc', 'markup.block.example.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: 'While werewolves are hardy community members, keep in mind the following dietary concerns:',
          scopes: ['source.asciidoc', 'markup.block.example.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: '...',
          scopes: ['source.asciidoc', 'markup.block.example.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: '====',
          scopes: ['source.asciidoc', 'markup.block.example.asciidoc']
        });
        numLine++;
        expect(tokens[numLine]).toHaveLength(1);
        expect(tokens[numLine][0]).toEqualJson({
          value: 'foobar',
          scopes: ['source.asciidoc']
        });
        numLine++;
        return expect(numLine).toBe(7);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/nick/.atom/packages/language-asciidoc/spec/blocks/admonition-block-grammar-spec.coffee
