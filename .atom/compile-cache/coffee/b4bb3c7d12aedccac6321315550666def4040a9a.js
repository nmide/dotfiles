(function() {
  describe('Should tokenize todo lists', function() {
    var grammar;
    grammar = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-asciidoc');
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName('source.asciidoc');
      });
    });
    it('parses the grammar', function() {
      expect(grammar).toBeDefined();
      return expect(grammar.scopeName).toBe('source.asciidoc');
    });
    it('when todo', function() {
      var tokens;
      tokens = grammar.tokenizeLine('- [ ] todo 1').tokens;
      expect(tokens).toHaveLength(4);
      expect(tokens[0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[1]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[2]).toEqual({
        value: '[ ]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      return expect(tokens[3]).toEqual({
        value: ' todo 1',
        scopes: ['source.asciidoc']
      });
    });
    it('when [*] done', function() {
      var tokens;
      tokens = grammar.tokenizeLine('- [*] todo 1').tokens;
      expect(tokens).toHaveLength(4);
      expect(tokens[0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[1]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[2]).toEqual({
        value: '[*]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      return expect(tokens[3]).toEqual({
        value: ' todo 1',
        scopes: ['source.asciidoc']
      });
    });
    it('when [x] done', function() {
      var tokens;
      tokens = grammar.tokenizeLine('- [x] todo 1').tokens;
      expect(tokens).toHaveLength(4);
      expect(tokens[0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[1]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[2]).toEqual({
        value: '[x]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      return expect(tokens[3]).toEqual({
        value: ' todo 1',
        scopes: ['source.asciidoc']
      });
    });
    return it('when a varied todo-list', function() {
      var tokens;
      tokens = grammar.tokenizeLines('- [ ] todo 1\n- normal item\n - [x] done x\n- [*] done *');
      expect(tokens).toHaveLength(4);
      expect(tokens[0]).toHaveLength(4);
      expect(tokens[0][0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[0][1]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[0][2]).toEqual({
        value: '[ ]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      expect(tokens[0][3]).toEqual({
        value: ' todo 1',
        scopes: ['source.asciidoc']
      });
      expect(tokens[1]).toHaveLength(2);
      expect(tokens[1][0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.list.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[1][1]).toEqual({
        value: ' normal item',
        scopes: ['source.asciidoc']
      });
      expect(tokens[2]).toHaveLength(5);
      expect(tokens[2][0]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[2][1]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[2][2]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[2][3]).toEqual({
        value: '[x]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      expect(tokens[2][4]).toEqual({
        value: ' done x',
        scopes: ['source.asciidoc']
      });
      expect(tokens[3]).toHaveLength(4);
      expect(tokens[3][0]).toEqual({
        value: '-',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.list.bullet.asciidoc']
      });
      expect(tokens[3][1]).toEqual({
        value: ' ',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc']
      });
      expect(tokens[3][2]).toEqual({
        value: '[*]',
        scopes: ['source.asciidoc', 'markup.todo.asciidoc', 'markup.todo.box.asciidoc']
      });
      return expect(tokens[3][3]).toEqual({
        value: ' done *',
        scopes: ['source.asciidoc']
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/nick/.atom/packages/language-asciidoc/spec/partials/todo-list-grammar-spec.coffee
