(function() {
  describe('Quotes paragraph', function() {
    var grammar;
    grammar = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-asciidoc');
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName('source.asciidoc');
      });
    });
    it('parses the grammar', function() {
      expect(grammar).toBeDefined();
      return expect(grammar.scopeName).toBe('source.asciidoc');
    });
    describe('Should tokenizes when', function() {
      return it('contains simple phrase', function() {
        var tokens;
        tokens = grammar.tokenizeLines('[quote, Erwin Schrödinger, Sorry]\nI don\'t like it, and I\'m sorry I ever had anything to do with it.\n\nfoobar');
        expect(tokens).toHaveLength(4);
        expect(tokens[0]).toHaveLength(7);
        expect(tokens[0][0]).toEqualJson({
          value: '[',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
        });
        expect(tokens[0][1]).toEqualJson({
          value: 'quote',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc', 'entity.name.function.asciidoc']
        });
        expect(tokens[0][2]).toEqualJson({
          value: ',',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'punctuation.separator.asciidoc']
        });
        expect(tokens[0][3]).toEqualJson({
          value: ' Erwin Schrödinger',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc']
        });
        expect(tokens[0][4]).toEqualJson({
          value: ',',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'punctuation.separator.asciidoc']
        });
        expect(tokens[0][5]).toEqualJson({
          value: ' Sorry',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc']
        });
        expect(tokens[0][6]).toEqualJson({
          value: ']',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
        });
        expect(tokens[1]).toHaveLength(1);
        expect(tokens[1][0]).toEqualJson({
          value: 'I don\'t like it, and I\'m sorry I ever had anything to do with it.',
          scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
        });
        expect(tokens[2]).toHaveLength(1);
        expect(tokens[2][0]).toEqualJson({
          value: '',
          scopes: ['source.asciidoc']
        });
        expect(tokens[3]).toHaveLength(1);
        return expect(tokens[3][0]).toEqualJson({
          value: 'foobar',
          scopes: ['source.asciidoc']
        });
      });
    });
    it('block attribute defined with some special characters', function() {
      var tokens;
      tokens = grammar.tokenizeLines('[quote%option#id]\nI don\'t like it, and I\'m sorry I ever had anything to do with it.\n\nfoobar');
      expect(tokens).toHaveLength(4);
      expect(tokens[0]).toHaveLength(7);
      expect(tokens[0][0]).toEqualJson({
        value: '[',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
      });
      expect(tokens[0][1]).toEqualJson({
        value: 'quote',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc', 'entity.name.function.asciidoc']
      });
      expect(tokens[0][3]).toEqualJson({
        value: 'option',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc']
      });
      expect(tokens[0][2]).toEqualJson({
        value: '%',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'punctuation.separator.asciidoc']
      });
      expect(tokens[0][4]).toEqualJson({
        value: '#',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'punctuation.separator.asciidoc']
      });
      expect(tokens[0][5]).toEqualJson({
        value: 'id',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc', 'markup.meta.attribute-list.asciidoc']
      });
      expect(tokens[0][6]).toEqualJson({
        value: ']',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
      });
      expect(tokens[1]).toHaveLength(1);
      expect(tokens[1][0]).toEqualJson({
        value: 'I don\'t like it, and I\'m sorry I ever had anything to do with it.',
        scopes: ['source.asciidoc', 'markup.italic.quotes.asciidoc']
      });
      expect(tokens[2]).toHaveLength(1);
      expect(tokens[2][0]).toEqualJson({
        value: '',
        scopes: ['source.asciidoc']
      });
      expect(tokens[3]).toHaveLength(1);
      return expect(tokens[3][0]).toEqualJson({
        value: 'foobar',
        scopes: ['source.asciidoc']
      });
    });
    return describe('Should not tokenizes when', function() {
      return it('beginning with space', function() {
        var tokens;
        tokens = grammar.tokenizeLines(' [quote, Erwin Schrödinger, Sorry]\nI don\'t like it, and I\'m sorry I ever had anything to do with it.\n\nfoobar');
        expect(tokens).toHaveLength(4);
        expect(tokens[0]).toHaveLength(1);
        expect(tokens[0][0]).toEqualJson({
          value: ' [quote, Erwin Schrödinger, Sorry]',
          scopes: ['source.asciidoc']
        });
        expect(tokens[1]).toHaveLength(1);
        expect(tokens[1][0]).toEqualJson({
          value: 'I don\'t like it, and I\'m sorry I ever had anything to do with it.',
          scopes: ['source.asciidoc']
        });
        expect(tokens[2]).toHaveLength(1);
        expect(tokens[2][0]).toEqualJson({
          value: '',
          scopes: ['source.asciidoc']
        });
        expect(tokens[3]).toHaveLength(1);
        return expect(tokens[3][0]).toEqualJson({
          value: 'foobar',
          scopes: ['source.asciidoc']
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/nick/.atom/packages/language-asciidoc/spec/blocks/quote-paragraph-grammar-spec.coffee
