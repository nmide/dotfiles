(function() {
  describe('Should tokenizes DSV table when', function() {
    var debug, grammar;
    grammar = null;
    beforeEach(function() {
      waitsForPromise(function() {
        return atom.packages.activatePackage('language-asciidoc');
      });
      return runs(function() {
        return grammar = atom.grammars.grammarForScopeName('source.asciidoc');
      });
    });
    debug = function(tokens) {
      return console.log(JSON.stringify(tokens, null, ' '));
    };
    it('parses the grammar', function() {
      expect(grammar).toBeDefined();
      return expect(grammar.scopeName).toBe('source.asciidoc');
    });
    return it('contains several lines', function() {
      var tokens;
      tokens = grammar.tokenizeLines(':===\nArtist:Track:Genre\n\nTool:Stinkfist:Metal\n:===');
      expect(tokens).toHaveLength(5);
      expect(tokens[0]).toHaveLength(1);
      expect(tokens[0][0]).toEqualJson({
        value: ':===',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'markup.table.delimiter.asciidoc']
      });
      expect(tokens[1]).toHaveLength(5);
      expect(tokens[1][0]).toEqualJson({
        value: 'Artist',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[1][1]).toEqualJson({
        value: ':',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc', 'markup.table.cell.delimiter.asciidoc']
      });
      expect(tokens[1][2]).toEqualJson({
        value: 'Track',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[1][3]).toEqualJson({
        value: ':',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc', 'markup.table.cell.delimiter.asciidoc']
      });
      expect(tokens[1][4]).toEqualJson({
        value: 'Genre',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[2]).toHaveLength(1);
      expect(tokens[2][0]).toEqualJson({
        value: '',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[3]).toHaveLength(5);
      expect(tokens[3][0]).toEqualJson({
        value: 'Tool',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[3][1]).toEqualJson({
        value: ':',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc', 'markup.table.cell.delimiter.asciidoc']
      });
      expect(tokens[3][2]).toEqualJson({
        value: 'Stinkfist',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[3][3]).toEqualJson({
        value: ':',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc', 'markup.table.cell.delimiter.asciidoc']
      });
      expect(tokens[3][4]).toEqualJson({
        value: 'Metal',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'string.unquoted.asciidoc']
      });
      expect(tokens[4]).toHaveLength(1);
      return expect(tokens[4][0]).toEqualJson({
        value: ':===',
        scopes: ['source.asciidoc', 'markup.table.dsv.asciidoc', 'markup.table.delimiter.asciidoc']
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvbmljay8uYXRvbS9wYWNrYWdlcy9sYW5ndWFnZS1hc2NpaWRvYy9zcGVjL3RhYmxlcy9kc3YtdGFibGUtZ3JhbW1hci1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsRUFBQSxRQUFBLENBQVMsaUNBQVQsRUFBNEMsU0FBQSxHQUFBO0FBQzFDLFFBQUEsY0FBQTtBQUFBLElBQUEsT0FBQSxHQUFVLElBQVYsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsZUFBQSxDQUFnQixTQUFBLEdBQUE7ZUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWQsQ0FBOEIsbUJBQTlCLEVBRGM7TUFBQSxDQUFoQixDQUFBLENBQUE7YUFHQSxJQUFBLENBQUssU0FBQSxHQUFBO2VBQ0gsT0FBQSxHQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQWQsQ0FBa0MsaUJBQWxDLEVBRFA7TUFBQSxDQUFMLEVBSlM7SUFBQSxDQUFYLENBRkEsQ0FBQTtBQUFBLElBVUEsS0FBQSxHQUFRLFNBQUMsTUFBRCxHQUFBO2FBQ04sT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsRUFBdUIsSUFBdkIsRUFBNkIsR0FBN0IsQ0FBWixFQURNO0lBQUEsQ0FWUixDQUFBO0FBQUEsSUFhQSxFQUFBLENBQUcsb0JBQUgsRUFBeUIsU0FBQSxHQUFBO0FBQ3ZCLE1BQUEsTUFBQSxDQUFPLE9BQVAsQ0FBZSxDQUFDLFdBQWhCLENBQUEsQ0FBQSxDQUFBO2FBQ0EsTUFBQSxDQUFPLE9BQU8sQ0FBQyxTQUFmLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsaUJBQS9CLEVBRnVCO0lBQUEsQ0FBekIsQ0FiQSxDQUFBO1dBaUJBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBLEdBQUE7QUFDM0Is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

//# sourceURL=/home/nick/.atom/packages/language-asciidoc/spec/tables/dsv-table-grammar-spec.coffee
