(function() {
  var $, AtomPhpNavigation, AtomPhpNavigationView, CompositeDisposable, Range, fs, scandir, trim, _markers, _ready2click, _ref, _tree;

  AtomPhpNavigationView = require('./atom-php-navigation-view');

  _ref = require('atom'), CompositeDisposable = _ref.CompositeDisposable, Range = _ref.Range;

  $ = require('jquery');

  fs = require('fs');

  trim = require('trim');

  scandir = require('scandir').create();

  _tree = {};

  _ready2click = true;

  _markers = [];

  module.exports = AtomPhpNavigation = {
    atomPhpNavigationView: null,
    modalPanel: null,
    subscriptions: null,
    enabled: false,
    indexingRunned: false,
    extendsRegExp: /^[\t\n\s]?(class|interface|trait|abstract class)\s([\S]+?)\s(\s?extends ([\w\d\_\\]+))?(\s?implements ([\w\d\_\\,\n\s]+))?/g,
    useRegExp: /use\s([\w\d_\\]+)[\s\w\d]?;/g,
    classRegExp: /^[\t\n\s]?(interface|abstract class|class) ([\d\w_\\]+)(|\n)/,
    namespaceRegExp: /namespace (.*?);/,
    classCallRegExp: /([\s\t\(\r\n]+|=)(new ([\w\d\\_]+)|([\w\d\\_]+)(::|\s+\$))/g,
    getTree: function() {
      return _tree;
    },
    printTree: function() {
      return console.log(this.getTree());
    },
    activate: function(state) {
      this.atomPhpNavigationView = new AtomPhpNavigationView(state.atomPhpNavigationViewState);
      this.modalPanel = atom.workspace.addModalPanel({
        item: this.atomPhpNavigationView.getElement(),
        visible: false
      });
      this.subscriptions = new CompositeDisposable;
      return this.subscriptions.add(atom.commands.add('atom-workspace', {
        'atom-php-navigation:toggle': (function(_this) {
          return function() {
            return _this.toggle();
          };
        })(this)
      }));
    },
    deactivate: function() {
      this.modalPanel.destroy();
      this.subscriptions.dispose();
      return this.atomPhpNavigationView.destroy();
    },
    serialize: function() {
      return {
        atomPhpNavigationViewState: this.atomPhpNavigationView.serialize()
      };
    },
    toggle: function() {
      this.indexing();
      if (this.enabled) {
        return this.disable();
      } else {
        return this.enable();
      }
    },
    toggleKey: function(e) {
      return _ready2click = e.altKey !== e.metaKey;
    },
    enable: function() {
      this.enabled = true;
      console.log('On');
      return this.editorViewSubscription = atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          var editorView;
          editorView = atom.views.getView(editor);
          editorView.addEventListener('keydown', _this.toggleKey);
          editorView.addEventListener('keyup', _this.toggleKey);
          editorView.addEventListener('mousedown', _this.click);
          if (_markers[editor.id] === void 0) {
            _markers[editor.id] = [];
          }
          _this.scanExtends(editor);
          _this.scanUses(editor);
          return _this.scanCallClasses(editor);
        };
      })(this));
    },
    disable: function() {
      this.enabled = false;
      console.log('Off');
      this._stopIndexation();
      return this.editorViewSubscription = atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          var editorView;
          editorView = atom.views.getView(editor);
          editorView.removeEventListener('keydown', _this.toggleKey);
          editorView.removeEventListener('keyup', _this.toggleKey);
          editorView.removeEventListener('mousedown', _this.click);
          return editor.getMarkers().map(function(marker) {
            if (marker.getProperties().className !== void 0) {
              return marker.destroy();
            }
          });
        };
      })(this));
    },
    createMarker: function(editor, res, match, fromStart, startCb) {
      var className, end, marker, markerProperties, namespace, options, range, row, start, start_c;
      if (fromStart == null) {
        fromStart = false;
      }
      if (startCb == null) {
        startCb = null;
      }
      if (!res.computedRange) {
        return false;
      }
      match = trim(match);
      namespace = match.split("\\");
      if (namespace === void 0) {
        return false;
      }
      className = namespace[namespace.length - 1];
      row = res.computedRange.end.row;
      if (typeof startCb !== 'function') {
        startCb = function() {
          return res.match[0].indexOf(' ' + match);
        };
      }
      start_c = res.computedRange.start.row < res.computedRange.end.row ? 0 : res.computedRange.start.column;
      start = fromStart ? start_c : startCb() + 1;
      end = start + match.length;
      range = new Range([row, start], [row, end]);
      marker = editor.markBufferRange(range);
      markerProperties = {
        className: className,
        filePath: res.filePath,
        namespace: namespace[0] === '\\' ? namespace.slice(1, namespace.length).join('\\') : namespace.join('\\')
      };
      marker.setProperties(markerProperties);
      options = {
        type: 'line',
        "class": 'clickable-class'
      };
      editor.decorateMarker(marker, options);
      return marker;
    },
    scanCallClasses: function(editor) {
      var self;
      self = this;
      return editor.scan(this.classCallRegExp, function(res) {
        if (res.match.length < 4) {
          return false;
        }
        if (res.match[3] !== void 0) {
          _markers[editor.id].push(self.createMarker(editor, res, res.match[3], true));
        }
        if (res.match[4] !== void 0) {
          return _markers[editor.id].push(self.createMarker(editor, res, res.match[4], true));
        }
      });
    },
    click: function(event) {
      var currentPosition, editor;
      if (_ready2click === false) {
        return false;
      }
      editor = atom.workspace.getActiveTextEditor();
      currentPosition = editor.getCursorBufferPosition();
      return $.each(_markers[editor.id], function(i, marker) {
        var className, exp, props;
        console.log(i, marker);
        if (marker && marker.getBufferRange().containsPoint(currentPosition)) {
          props = marker.getProperties();
          className = props.className;
          if (_tree[className] !== void 0 && typeof _tree[className][0] === 'object') {
            atom.open({
              pathsToOpen: _tree[className][0].path
            });
          } else {
            exp = new RegExp("^(class|interface|trait|abstract class) (" + className + ")[^\\w\\d]+");
            atom.workspace.scan(exp, function(res) {
              if (res.filePath) {
                atom.open({
                  pathsToOpen: res.filePath
                });
                return _tree[className] = {
                  path: props.filePath,
                  className: className,
                  namespace: props.namespace
                };
              }
            });
          }
          return false;
        }
      });
    },
    scanUses: function(editor) {
      var self;
      self = this;
      return editor.scan(this.useRegExp, function(res) {
        if (res.match.length < 2) {
          return false;
        }
        return _markers[editor.id].push(self.createMarker(editor, res, res.match[1]));
      });
    },
    scanExtends: function(editor) {
      var self;
      self = this;
      return editor.scan(this.extendsRegExp, function(res) {
        var add, match, startCb;
        if (res.match.length < 5) {
          return false;
        }
        if (res.match[4] !== void 0) {
          match = trim(res.match[4]);
          add = trim(res.match[3].split(' ')[0]) + ' ';
          startCb = function() {
            return res.match[0].indexOf(add + match) + add.length;
          };
          _markers[editor.id].push(self.createMarker(editor, res, match, false, startCb));
        }
        if (res.match[6] !== void 0) {
          return res.match[6].split(',').map(function(str) {
            str = trim(str);
            startCb = function() {
              var _s;
              _s = res.match[5].indexOf(' ' + str);
              return res.match[0].indexOf(res.match[5]) + _s;
            };
            return _markers[editor.id].push(self.createMarker(editor, res, str, false, startCb));
          });
        }
      });
    },
    indexing: function() {
      var path, self;
      if (!this.indexingRunned) {
        this.indexingRunned = true;
        this.modalPanel.show();
      } else {
        return false;
      }
      self = this;
      path = atom.project.getPaths()[0];
      scandir.on('file', function(filePath, stats) {
        fs.readFile(filePath, {
          encoding: 'utf-8'
        }, function(err, data) {
          var dataArr;
          dataArr = data.split(/\n/g);
          return dataArr.forEach(function(line, n) {
            var className, fileName, key, namespace;
            namespace = line.match(self.namespaceRegExp);
            className = line.match(self.classRegExp);
            if (!className) {
              return false;
            }
            className = className ? className[2] : null;
            fileName = filePath.split('/');
            fileName = fileName[fileName.length - 1];
            key = className ? className : fileName;
            if (_tree[key] === void 0) {
              _tree[key] = [];
            }
            return _tree[key].push({
              line: n + 1,
              namespace: namespace ? namespace[1] : '',
              className: className,
              path: filePath
            });
          });
        });
      });
      scandir.on('error', function(err) {
        console.error(err);
      });
      self = this;
      scandir.on('end', function() {
        if (self.indexingRunned) {
          self.indexingComplete();
        }
      });
      return scandir.scan({
        dir: path,
        recursive: true,
        filter: /\.php/
      });
    },
    _stopIndexation: function() {
      this.indexingRunned = false;
      if (this.modalPanel.isVisible()) {
        return this.modalPanel.hide();
      }
    },
    indexingComplete: function() {
      this._stopIndexation();
      return this.printTree();
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/nick/.atom/packages/atom-php-navigation/lib/atom-php-navigation.coffee
